import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { BillData, PowerTip, TrendData, UserScore } from '../types';

export const generatePDFReport = async (
  billData: BillData,
  tips: PowerTip[],
  trend: TrendData,
  userScore: UserScore,
  costPerUnit: number
): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(59, 130, 246); // Blue color
  pdf.text('Smart Power Optimizer Report', pageWidth / 2, 20, { align: 'center' });
  
  // Date
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, 30, { align: 'center' });
  
  let yPosition = 50;
  
  // Bill Summary
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Bill Summary', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(12);
  pdf.text(`Month: ${billData.month}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Total Units: ${billData.units} kWh`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Total Amount: ₹${billData.amount}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Cost per Unit: ₹${costPerUnit}`, 20, yPosition);
  yPosition += 20;
  
  // User Score
  pdf.setFontSize(16);
  pdf.text('Energy Efficiency Score', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(12);
  pdf.text(`Score: ${userScore.score}/100`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Level: ${userScore.badge} ${userScore.level}`, 20, yPosition);
  yPosition += 8;
  
  const lines = pdf.splitTextToSize(userScore.description, pageWidth - 40);
  pdf.text(lines, 20, yPosition);
  yPosition += lines.length * 6 + 15;
  
  // Trend Analysis
  pdf.setFontSize(16);
  pdf.text('Usage Trend', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(12);
  pdf.text(`${trend.icon} ${trend.description}`, 20, yPosition);
  yPosition += 20;
  
  // Power Saving Tips
  pdf.setFontSize(16);
  pdf.text('Personalized Recommendations', 20, yPosition);
  yPosition += 15;
  
  tips.slice(0, 5).forEach((tip, index) => {
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = 20;
    }
    
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    pdf.text(`${index + 1}. ${tip.icon} ${tip.title}`, 20, yPosition);
    yPosition += 8;
    
    pdf.setFont(undefined, 'normal');
    const tipLines = pdf.splitTextToSize(tip.description, pageWidth - 40);
    pdf.text(tipLines, 20, yPosition);
    yPosition += tipLines.length * 6;
    
    pdf.setTextColor(34, 197, 94); // Green color
    pdf.text(`Potential Savings: ₹${tip.savings}/month`, 20, yPosition);
    pdf.setTextColor(0, 0, 0);
    yPosition += 15;
  });
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by Smart Power Optimizer - Your AI-powered energy assistant', pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  // Save the PDF
  pdf.save(`power-analysis-report-${billData.month.replace(' ', '-')}.pdf`);
};

export const captureChartAsPDF = async (chartElementId: string, filename: string): Promise<void> => {
  const element = document.getElementById(chartElementId);
  if (!element) return;
  
  const canvas = await html2canvas(element, {
    backgroundColor: '#ffffff',
    scale: 2
  });
  
  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF();
  const imgWidth = 190;
  const imgHeight = (canvas.height * imgWidth) / canvas.width;
  
  pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
  pdf.save(filename);
};